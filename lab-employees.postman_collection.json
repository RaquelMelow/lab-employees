{
	"info": {
		"_postman_id": "86348f81-16f6-45c0-889a-ecb0e46cf468",
		"name": "lab-employees",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34172401"
	},
	"item": [
		{
			"name": "employees",
			"item": [
				{
					"name": "Item 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response is an array with at least one element\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array').and.to.have.lengthOf.at.least(1);",
									"});",
									"",
									"",
									"pm.test(\"Verify name field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(employee) {",
									"        pm.expect(employee.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8000/api/employees",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"employees"
							]
						}
					},
					"response": []
				},
				{
					"name": "Item 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(employee) {",
									"    pm.expect(employee.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Age is a positive integer\", function () {",
									"    const responseData = pm.response.json();",
									"    responseData.forEach(function(employee) {",
									"        pm.expect(employee.age).to.be.a('number').and.to.be.greaterThan(0, \"Age should be a positive integer\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8000/api/employees?page=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"employees"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Item 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is set to application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response body is an array\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('array');",
									"});",
									"",
									"",
									"pm.test(\"Verify each employee has a non-empty name and a positive age\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"",
									"    responseData.forEach(function (employee) {",
									"        pm.expect(employee.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"        pm.expect(employee.age).to.exist.and.to.be.a('number').and.to.be.above(0, \"Age should be a positive number\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8000/api/employees?page=2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"employees"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Item 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(item) {",
									"    pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Age is a positive integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"  ",
									"  responseData.forEach(function(employee) {",
									"    pm.expect(employee.age).to.be.a('number').that.is.greaterThan(0, \"Age should be a positive integer\");",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8000/api/employees?page=3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"employees"
							],
							"query": [
								{
									"key": "page",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Item 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"The 'finished' array is present in the response and contains at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.finished).to.exist;",
									"    pm.expect(responseData.finished).to.be.an('array').and.to.have.lengthOf.at.least(1);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the badges array is present and not empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.badges).to.exist.and.to.be.an('array');",
									"    pm.expect(responseData.badges).to.not.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8000/api/employees/oldest",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"employees",
								"oldest"
							]
						}
					},
					"response": []
				},
				{
					"name": "Item 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function (employee) {",
									"        pm.expect(employee.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Age is a positive integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function(employee) {",
									"        pm.expect(employee.age).to.be.a('number').and.to.be.at.least(0, \"Age should be a positive integer\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Phone has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function (employee) {",
									"        pm.expect(employee.phone).to.be.an('object');",
									"        pm.expect(employee.phone).to.have.property('personal');",
									"        pm.expect(employee.phone).to.have.property('work');",
									"        pm.expect(employee.phone).to.have.property('ext');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8000/api/employees?user=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"employees"
							],
							"query": [
								{
									"key": "user",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Item 7",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function(employee){",
									"        pm.expect(employee.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Age is a positive integer\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.forEach(function (employee) {",
									"        pm.expect(employee.age).to.be.a('number').and.to.be.above(0);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Alice\",\r\n    \"age\": 35,\r\n    \"phone\": {\r\n        \"personal\": \"555-111-111\",\r\n        \"work\": \"555-222-222\",\r\n        \"ext\": \"1234\"\r\n    },\r\n    \"privileges\": \"user\",\r\n    \"favorites\": {\r\n        \"artist\": \"Picasso\",\r\n        \"food\": \"sushi\"\r\n    },\r\n    \"finished\": [\r\n        15,\r\n        28\r\n    ],\r\n    \"badges\": [\r\n        \"blue\",\r\n        \"silver\"\r\n    ],\r\n    \"points\": [\r\n        {\r\n            \"points\": 92,\r\n            \"bonus\": 15\r\n        },\r\n        {\r\n            \"points\": 73,\r\n            \"bonus\": 10\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8000/api/employees",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"employees"
							]
						}
					},
					"response": []
				},
				{
					"name": "Item 8",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is 'application/json'\", function () {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
									"});",
									"",
									"",
									"pm.test(\"Response is an array with at least one element\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array').and.to.have.lengthOf.at.least(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Alice\",\r\n    \"age\": 35,\r\n    \"phone\": {\r\n        \"personal\": \"555-111-111\",\r\n        \"work\": \"555-222-222\",\r\n        \"ext\": \"1234\"\r\n    },\r\n    \"privileges\": \"user\",\r\n    \"favorites\": {\r\n        \"artist\": \"Picasso\",\r\n        \"food\": \"sushi\"\r\n    },\r\n    \"finished\": [\r\n        15,\r\n        28\r\n    ],\r\n    \"badges\": [\r\n        \"blue\",\r\n        \"silver\"\r\n    ],\r\n    \"points\": [\r\n        {\r\n            \"points\": 92,\r\n            \"bonus\": 15\r\n        },\r\n        {\r\n            \"points\": 73,\r\n            \"bonus\": 10\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8000/api/employees",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"employees"
							]
						}
					},
					"response": []
				},
				{
					"name": "Item 9",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'name' is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function(employee) {",
									"        pm.expect(employee.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"    });",
									"});",
									"",
									"pm.test(\"Verify that the 'privileges' field is either an empty string or a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  ",
									"  responseData.forEach(function(employee) {",
									"    pm.expect(employee.privileges).to.exist.and.to.be.oneOf(['', pm.expect.toBeNonEmptyString()]);",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Alice\",\r\n    \"age\": 35,\r\n    \"phone\": {\r\n        \"personal\": \"555-111-111\",\r\n        \"work\": \"555-222-222\",\r\n        \"ext\": \"1234\"\r\n    },\r\n    \"privileges\": \"user\",\r\n    \"favorites\": {\r\n        \"artist\": \"Picasso\",\r\n        \"food\": \"sushi\"\r\n    },\r\n    \"finished\": [\r\n        15,\r\n        28\r\n    ],\r\n    \"badges\": [\r\n        \"blue\",\r\n        \"silver\"\r\n    ],\r\n    \"points\": [\r\n        {\r\n            \"points\": 92,\r\n            \"bonus\": 15\r\n        },\r\n        {\r\n            \"points\": 73,\r\n            \"bonus\": 10\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8000/api/employees",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"employees"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}